gname="G2",
tname="tp",
idname="year",
data=data2)
gname
tname
head(data)
data$tp
tname
data$year
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="tp",
idname="year",
data=data2)
tname
gname
data2$id
data2$G2 <- data2$G
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2)
data2$G2 <- data2$G
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2)
ptep$glist
ptep$tlist
res
attributes(res)
res$attgt.list
debug(panel_empirical_bootstrap)
ret_quantile
aggte
# staggered ife
data4 <- subset(data3, G %in% c(2007,2006,0))
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
nife=1)
cic_res
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2)
# draw a bootstrap sample; here, we'll call an outside function
bdata <- BMisc::blockBootSample(data, idname)
bptep <- setup_pte_fun(yname=ptep$yname,
gname=ptep$gname,
tname=ptep$tname,
idname=ptep$idname,
data=bdata,
alp=ptep$alp,
boot_type=boot_type,
gt_type=gt_type,
ret_quantile=ret_quantile,
biters=ptep$biters,
cl=ptep$cl,
...)
ret_quantile
data2$G2 <- data2$G
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2)
# draw a bootstrap sample; here, we'll call an outside function
bdata <- BMisc::blockBootSample(data, idname)
nrow(bdata)
bptep <- setup_pte_fun(yname=ptep$yname,
gname=ptep$gname,
tname=ptep$tname,
idname=ptep$idname,
data=bdata,
alp=ptep$alp,
boot_type=boot_type,
gt_type=gt_type,
#ret_quantile=ret_quantile,
biters=ptep$biters,
cl=ptep$cl,
...)
devtools::load_all("~/Dropbox/qte")
devtools::load_all("~/Dropbox/pte")
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2)
data2$G2 <- data2$G
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2,
boot_type="empirical",
cl=4)
cic_res
cic_res$att_gt
cic_res$attgt_results
summary(cic_res)
ggpte(cic_res)
cic_res$attgt_results
debug(pte_default)
# extensions
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
cic_res <- qte::cic2(yname="lemp",
gname="G2",
tname="year",
idname="id",
data=data2,
boot_type="empirical",
cl=4)
summary(cic_res)
data2$G2 <- data2$G
cic_res <- qte::cic2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data2,
boot_type="empirical",
cl=4)
# extensions
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
# extensions
devtools::load_all("~/Dropbox/pte")
devtools::load_all("~/Dropbox/qte")
devtools::load_all("~/Dropbox/ife")
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
# extensions
devtools::load_all("~/Dropbox/pte")
devtools::load_all("~/Dropbox/qte")
devtools::load_all("~/Dropbox/ife")
data2$G2 <- data2$G
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
debug(pte_default)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
debug(pte2)
ptep$glist
ptep$tlist
debug(compute.pte2)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
groups
time.periods
nrow(gt_data)
debug(attgt_fun)
undebug(pte2)
undebug(pte_default)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
d_covs_formula
subset(gt_data,name=="post")
nrow(subset(gt_data,name=="post"))
nrow(subset(gt_data,name=="pre"))
head(gt_data)
unique(data$id)
unique(gt_data$id)
length(unique(gt_data$id))
nrow(gt_data)
unique(gt_data$year)
debug(pte_default)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
# extensions
devtools::load_all("~/Dropbox/pte")
devtools::load_all("~/Dropbox/qte")
devtools::load_all("~/Dropbox/ife")
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
did::ggdid(lo_res$att_gt)
debug(pte_default_attgt)
debug(compute.pte)
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
debug(attgt_fun)
nrow(gt_data)
dX
lagged_outcome_cov
lagY_formula
lagY_formula
gt_data$Y
lagY
head(gt_data_outcomes)
head(gt_dataX)
head(Y)
head(Y)
use_formula
lagY_formula
gt_data
gt_dataX
head(gt_dataX)
head(lagY)
# lagged outcome
if (lagged_outcome_cov) lagY_formula <- ~ -1 + Y else lagY_formula <- ~ -1
lagY <- model.frame(lagY_formula, data=subset(gt_data, name=="post"))
# convert two period panel into one period
gt_data_outcomes <- tidyr::pivot_wider(gt_data[,c("D","id","period","name","Y")], id_cols=c(id, D),
names_from=c(name),
values_from=c(Y))
# merge outcome and covariate data
gt_dataX <- cbind.data.frame(gt_data_outcomes, Xpre, dX, lagY)
# treatment dummy variable
D <- gt_dataX$D
# post treatment outcome
Y <- gt_dataX$post
if (d_outcome) Y <- gt_dataX$post - gt_dataX$pre
# estimate attgt
# DRDID::drdid_panel is for panel data, but we can hack it
# to work in levels by just setting outcomes in "first period"
# to be equal to 0 for all units
gt_dataX <- droplevels(gt_dataX)
xformla
# pre-treatment covariates
Xpre <- model.frame(xformla, data=subset(gt_data,name=="pre"))
# change in covariates
dX <- model.frame(d_covs_formula, data=subset(gt_data,name=="post")) - model.frame(d_covs_formula, data=subset(gt_data,name=="pre"))
if (ncol(dX) > 0) colnames(dX) <- paste0("d", colnames(dX))
# lagged outcome
if (lagged_outcome_cov) lagY_formula <- ~ -1 + Y else lagY_formula <- ~ -1
lagY <- model.frame(lagY_formula, data=subset(gt_data, name=="pre"))
lagY
head(lagY)
head(gt_data)
# convert two period panel into one period
gt_data_outcomes <- tidyr::pivot_wider(gt_data[,c("D","id","period","name","Y")], id_cols=c(id, D),
names_from=c(name),
values_from=c(Y))
# merge outcome and covariate data
gt_dataX <- cbind.data.frame(gt_data_outcomes, Xpre, dX, lagY)
# treatment dummy variable
D <- gt_dataX$D
# post treatment outcome
Y <- gt_dataX$post
if (d_outcome) Y <- gt_dataX$post - gt_dataX$pre
# estimate attgt
# DRDID::drdid_panel is for panel data, but we can hack it
# to work in levels by just setting outcomes in "first period"
# to be equal to 0 for all units
gt_dataX <- droplevels(gt_dataX)
lagY_formula
head(gt_dataX)
lagY_formula=NULL
lagY=NULL
# pre-treatment covariates
Xpre <- model.frame(xformla, data=subset(gt_data,name=="pre"))
# change in covariates
dX <- model.frame(d_covs_formula, data=subset(gt_data,name=="post")) - model.frame(d_covs_formula, data=subset(gt_data,name=="pre"))
if (ncol(dX) > 0) colnames(dX) <- paste0("d", colnames(dX))
# convert two period panel into one period
gt_data_outcomes <- tidyr::pivot_wider(gt_data[,c("D","id","period","name","Y")], id_cols=c(id, D),
names_from=c(name),
values_from=c(Y))
# merge outcome and covariate data
gt_dataX <- cbind.data.frame(gt_data_outcomes, Xpre, dX, lagY)
# merge outcome and covariate data
gt_dataX <- cbind.data.frame(gt_data_outcomes, Xpre, dX)
head(gt_dataX)
# treatment dummy variable
D <- gt_dataX$D
# post treatment outcome
Y <- gt_dataX$post
if (d_outcome) Y <- gt_dataX$post - gt_dataX$pre
head(Y)
use_formula
if (lagged_outcome_cov) use_formula <- BMisc::addCovToFormla("pre", use_formula)
use_formula
covmat <- model.matrix(use_formula, data=gt_dataX)
covmat2 <- covmat[D==0,]
head(covmat2)
Y
#www <- gt_dataX[D==0,]$.w
n_unt <- sum(1-D)
precheck_reg <- qr(t(covmat2)%*%covmat2/n_unt)
keep_covs <- precheck_reg$pivot[1:precheck_reg$rank]
covmat <- covmat[,keep_covs]
est_method
attgt <- DRDID::drdid_panel(y1=Y,
y0=rep(0,length(Y)),
D=D,
covariates=covmat,
inffunc=TRUE)
attgt
# extensions
devtools::load_all("~/Dropbox/pte")
devtools::load_all("~/Dropbox/qte")
devtools::load_all("~/Dropbox/ife")
data2$G2 <- data2$G
# lagged outcomes identification strategy
lo_res <- pte::pte_default(yname="lemp",
tname="year",
idname="id",
gname="G2",
data=data2,
d_outcome=TRUE,
lagged_outcome_cov=TRUE)
summary(lo_res)
ggpte(lo_res)
did::ggdid(lo_res$att_gt)
ggpte(lo_res)
devtools::install_github("bcallaway11/pte")
devtools::install_github("bcallaway11/qte")
devtools::install_github("bcallaway11/ife")
?geom_hline
ggpte(cic_res) + geom_hline(yintercept=0, size=1.5)
summary(cic_res)
# staggered ife
data4 <- subset(data3, G %in% c(2007,2006,0))
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
nife=1)
library(tidyr)
# staggered ife
data4 <- subset(data3, G %in% c(2007,2006,0))
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
nife=1)
library(BMisc)
# staggered ife
data4 <- subset(data3, G %in% c(2007,2006,0))
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
nife=1)
library(dplyr)
# staggered ife
data4 <- subset(data3, G %in% c(2007,2006,0))
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
nife=1)
ggpte(sife_res)
library(pte)
ggpte(sife_res)
sife_res$att_gt
did::ggdid(sife_res$att_gt)
sife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=data4,
boot_type="empirical",
cl=4,
nife=1)
sife_res$overall_att
sife_res$att_gt
sife_res$event_study
sife_res$att_gt
sife_res$att_gt$att
sife_res$overall_att$overall.att
sife_res$overall_att
sife_res$att_gt
# manually bootstrap
biters <- 10
bres <- pblapply(1:biters, function(b) {
bdata4 <- BMisc::blockBootSample(data4, "id")
bsife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=bdata4,
nife=1)
sife_res$att_gt$att
})
# manually bootstrap
biters <- 10
bres <- pbapply::pblapply(1:biters, function(b) {
bdata4 <- BMisc::blockBootSample(data4, "id")
bsife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=bdata4,
nife=1)
sife_res$att_gt$att
})
# manually bootstrap
biters <- 10
bres <- pbapply::pblapply(1:biters, function(b) {
bdata4 <- BMisc::blockBootSample(data4, "id")
bsife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=bdata4,
nife=1)
sife_res$att_gt$att
}, cl=4)
bres
bind(bres)
rbind(bres)
do.call(rbind, bres)
bres
# manually bootstrap
biters <- 10
bres <- pbapply::pblapply(1:biters, function(b) {
bdata4 <- BMisc::blockBootSample(data4, "id")
bsife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=bdata4,
nife=1)
bsife_res$att_gt$att
}, cl=4)
do.call(rbind, bres)
apply(do.call(rbind, bres), 2, sd)
# manually bootstrap
biters <- 100
bres <- pbapply::pblapply(1:biters, function(b) {
bdata4 <- BMisc::blockBootSample(data4, "id")
bsife_res <- ife::staggered_ife2(yname="lemp",
gname="G",
tname="year",
idname="id",
data=bdata4,
nife=1)
bsife_res$att_gt$att
}, cl=4)
apply(do.call(rbind, bres), 2, sd)
do.call(rbind, bres)
sife_res
sife_res$att_gt
